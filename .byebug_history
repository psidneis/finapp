c
params[:account][:modal].present?
c
params[:account][:modal].present?
params[:account][:modal]
params[:account]
params
account_params
params
params[:modal].present?
c
n
@account
n
params
c
n
params
c
params
c
params
c
invoice.value += installment.value
installment.value
invoice.value
invoice
c
invoice.payment_day
invoice
c
nc
c
n
c
n
c
n
current_invoice.present?
current_invoice
c
n
cn
invo
invo = self.invoices.build
in = self.invoices.build
i = self.invoices.build
self.invoices.build
self.invoices
self
i
i = self.invoices.new
i = self.invoices.create
i = self.invoices.build
self.current_invoice.present?
self.current_invoice.present
self.current_invoice.count
self.current_invoice
c
cards.joins(:installments).where("date < ? and not paid", billing_day).select(:installments)
cards.joins(:installments).where("date < ? and not paid", billing_day).class
cards.joins(:installments).where("date < ? and not paid", billing_day)
(self.value - cards.joins(:installments).where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - cards.joins(:installments).where("date < ? and not paid", billing_day)
(self.value - cards.joins(:installments).where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - cards.joins(:installments).where("date < ? and not paid", billing_day).sum(:value))
(self.value - Installment.cards.where("date < ? and not paid", billing_day).sum(:value))
(self.value - Installment.joins(:cards).where("date < ? and not paid", billing_day).sum(:value))
(self.value - Installment.joins(cards).where("date < ? and not paid", billing_day).sum(:value))
cards = self.cards
Installment.joins(:cards)(self.value - installment.joins(:cards).where("date < ? and not paid", billing_day).sum(:value))
cards = self.cards
self
self.cards.joins(:installments).select(:installments)
self.cards.joins(:installments).select(:installment)
self.cards.joins(:installments).select(:installment).class
self.cards.joins(:installments).select(:installments).class
self.cards.joins(:installments).select(:installments)
self.cards.joins(:installments).class
self.cards.joins(:installments)
(self.value - self.installments.joins(:cards).where("date < ? and not paid", billing_day).sum(:value)).to_s
self.cards.joins(:installments).first
self.cards.joins(:installments).first.value
self.cards.joins(:installments).first.value.to_s
self.cards.joins(:installments).first
self.cards.joins(:installments).count
self.cards.joins(:installments)
(self.value - self.cards.joins(:installments)
(self.value - self.cards.joins(:installments).where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - self.cards.installments.where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - self.joins(:cards).installments.where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - self.joins(:card).installments.where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - self.joins(:cards).installments.where("date < ? and not paid", billing_day).sum(:value)).to_s
self.installments.first.value.to_s
self.installments.first
self.installments.count
self.installments
self.istallments
self.value.to_s
self.value
(self.value - self.installments.where("date < ? and not paid", billing_day).sum(:value)).to_s
(self.value - self.installments.where("date < ? and not paid", billing_day).sum(:value))
billing_day
n
self.title
c
@search_period_type
@search_period
c
(self.installments.where("date > ? and paid", end_date).sum(:value) unless self.created_at > end_date).to_s
self.installments.where("date > ? and paid", end_date).sum(:value) unless self.created_at > end_date
self.value.to_s
c
self.value.to_s
self.value
c
end_date
c
current_user
c
current_user.name
current_user
c
@current_user
current_user
c
end_date
c
@end_date
c
atual_launches_value = current_user.installments.where("date > ? and paid", @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ?", @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ?, @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ?, @end_date).sum(:value))
atual_launches_value = current_user.installments.where("date > ?, @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ? and paid = 1, @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ? and paid, @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ? and paid = 1" @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ? and paid = true" @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ? and paid == true" @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ? and paid" @end_date).sum(:value)
atual_launches_value.to_s
atual_launches_value = current_user.installments.where("date > ?", @end_date).sum(:value)
atual_launches_value = current_user.installments.where("date > ?" @end_date).sum(:value)
@end_date
atual_account_value = @accounts.first.value
@accounts
c
x
c
self
@end_date
current_user.installments.sum(:value).to_s
current_user.installments.sum(:value)
current_user
user
@installments.sum(:value).to_s
@installments.sum(:value)
@installments
@end_date
@start_date
c
@cards
c
@accounts
@cards
c
@launch
c
@launch.try(:launchable_type).try(:==, 'Card')
c
@launch
c
@launch
c
@launch
c
@launch
c
@launch.launchable_type
@launch.launchable
@launch.launchabel
@launch.paid?
@launch
c
@launch
c
@launch
launch_params[:paid]
params
c
launch_params[:paid]
c
launch_params[:paid]
c
launch_params[:paid]
c
launch_params[:paid]
c
launch_params[:paid]
c
launch_params[:paid]
launch_params
params
c
policy_scope(Account).count
policy_scope(Account).account
policy_scope(Account).class
policy_scope(Account)
c
@launch.launchable_type
@launch
c
@installment.valid?
@installment.save?
@installment
c
@installment.changed?
@installment.persisted?
@installment
c
@launch
@launch.persisted?
c
@installment.changed?
@installment.persisted?
c
@installment.changed?
@installment.persisted?
c
@installment.changed?
@installment.persisted?
@installment
c
@launch.persisted?
@launch.changed?
@launch_changed?
@launch_changed
c
@launch.persisted?
c
@launch.persisted?
